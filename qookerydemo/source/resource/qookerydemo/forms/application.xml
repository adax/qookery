<?xml version="1.0" encoding="utf-8"?>
<!--
	The Qookery Demo application is written in Qookery
	
	The XML has been annotated to serve as an example of some advanced Qookery features
-->
<form xmlns="http://www.qookery.org/ns/Form"
		xmlns:q-ace="http://www.qookery.org/ns/Form/Ace"
		xmlns:demo="http://www.qookery.org/ns/Form/Demo"
		layout="v-box">

	<!-- Import the currently running application -->
	<import service="qx.application.IApplication" />

	<!-- Import some classes for code brevity -->
	<import class="qookery.contexts.Qookery" />
	<import class="qx.bom.History" />

	<tool-bar>

		<!-- The custom demo selector component is created using our application's namespace "demo" -->
		<demo:demo-selector />

		<separator variant="vertical" />

		<!-- Toolbar buttons are just normal buttons with altered appearances -->
		<button label="Run Again" focusable="false" appearance="toolbar-button" icon="qookerydemo/icons/24/run.png">
			<script event="execute">
				// Demo running logic is publicly exposed to Qookery and Qooxdoo as an action bound to the form component
				// The $.Form variable is always available and points to the current form component
				$.Form.executeAction("run");
			</script>
		</button>

		<button label="About" focusable="false" appearance="toolbar-button" icon="qookerydemo/icons/24/about_gs.png">
			<script event="execute">
				// Invoke a utility static method that opens a new window with a Qookery form within
				$.Qookery.openWindow("qookerydemo/forms/aboutDialog.xml");
			</script>
		</button>

	</tool-bar>

	<split-pane orientation="horizontal" flexes="1 1" flex="1">

		<!-- A custom appearance is used for this split-pane in order to avoid superfluous borders -->
		<split-pane orientation="vertical" flexes="3 1" appearance="undecorated-splitpane">

			<composite layout="v-box" spacing="5" padding="5">

				<!-- Below font, decorator and text-color values are defined by the current theme -->
				<label label="Qookery Input XML" font="small" decorator="input" text-color="text-gray" padding="0 10" allow-stretch-x="true" />

				<!-- We create an editor that is provided by the ACE extension using the namespace q-ace -->
				<q-ace:editor id="xmlEditor" mode="xml" flex="1" create-label="false" tab-size="3" theme="eclipse" />

			</composite>

			<composite layout="v-box" spacing="5" padding="5">

				<label label="Form Model JSON (optional)" font="small" decorator="input" text-color="text-gray" padding="0 10" allow-stretch-x="true" />

				<!-- A simple logic for loading and unloading models into forms is shown below  -->
				<composite layout="h-box" spacing="5">

					<button label="Load Model">
						<script event="execute">
							var text = $("#jsonEditor").getValue();
							var json = qx.lang.Json.parse(text);
							var model = qx.data.marshal.Json.createModel(json, true);
							$("#resultArea").getMainWidget().getFormComponent().setModel(model);
						</script>
					</button>

					<button label="Unload Model">
						<script event="execute">
							$("#resultArea").getMainWidget().getFormComponent().setModel(null);
						</script>
					</button>

					<button label="Recreate JSON">
						<script event="execute">
							var model = $("#resultArea").getMainWidget().getFormComponent().getModel();
							var text = qx.util.Serializer.toJson(model);
							$("#jsonEditor").setValue(text);
						</script>
					</button>

				</composite>

				<q-ace:editor id="jsonEditor" mode="json" flex="1" create-label="false" tab-size="3" show-line-numbers="false" show-invisibles="true" />

			</composite>

		</split-pane>

		<composite layout="v-box" spacing="5" padding="5">

			<label label="Rendered Result" font="small" decorator="input" text-color="text-gray" padding="0 10" allow-stretch-x="true" />

			<!-- A custom component is used to load/unload forms within an initially empty scroll area -->
			<demo:result-area id="resultArea" flex="1" />

		</composite>

	</split-pane>

	<script action="run">
		var xmlCode = $("#xmlEditor").getValue();
		if(xmlCode == null) return;
		$("#resultArea").getMainWidget().loadForm(xmlCode);
	</script>

	<!-- This action is used by Qooxdoo code- it takes a single argument, the symbolic name of the demo to load -->
	<script action="load" arguments="demoName">
		var configuration = $.IApplication.getDemoConfiguration(demoName);
		if(configuration == null) return;
		$.History.getInstance().addToHistory(demoName, "Qookery Demo - " + configuration["label"]);
		var formFile = configuration["formFile"];
		var formUrl = "resource/qookerydemo/forms/" + formFile;
		$.Qookery.loadResource(formUrl, this, function(data) {
			$("#xmlEditor").setValue(data);
			$.Form.executeAction("run");
		});
		var modelFile = configuration["modelFile"];
		if(modelFile == null) {
			$("#jsonEditor").setValue("null");
		}
		else {
			var modelUrl = "resource/qookerydemo/models/" + modelFile;
			$.Qookery.loadResource(modelUrl, this, function(data) {
				$("#jsonEditor").setValue(data);
			});
		}
	</script>

	<!-- This script is called once the totality of the form has been parsed to load the first demo automatically -->
	<script>
		var demoName = $.History.getInstance().getState();
		if(demoName === "recursion") demoName = null; // Needed to prevent an unwanted infinite recursion
		$.Form.executeAction("load", demoName || "helloWorld");
	</script>

</form>
