<?xml version="1.0" encoding="UTF-8"?>
<!--
	The Qookery Demo application is written in Qookery!
	
	You are currently looking at its main form. It has been annotated to serve as a showcase
	of some cool features.
-->
<form xmlns="http://www.qookery.org/ns/Form" layout="v-box">

	<!-- Import the implementation of the Qooxdoo application -->

	<import service="qx.application.IApplication" />

	<!-- Import the Qookery static class, we need some of its utility methods  -->

	<import class="qookery.contexts.Qookery" />

	<!-- Import the History singleton instance, it will handle browser navigation -->

	<import singleton="qx.bom.History" />

	<!-- Declare an input variable; it is set to 'true' by bootstrap code and we use it
		 to prevent infinite loops when this form is loaded recursively from within itself. -->
		 
	<variable name="isRoot" type="Boolean" default="false" writable="false" />

	<!-- The first component of the form's VBox is the main tool bar -->

	<tool-bar>

		<!-- Custom demo selector component, created using application's namespace "demo" -->

		<demo:demo-selector xmlns:demo="http://www.qookery.org/ns/Form/Demo" />

		<separator variant="vertical" />

		<!-- Toolbar buttons are just normal buttons with altered appearances -->

		<button label="Run Again" focusable="false" appearance="toolbar-button"
				icon="qookerydemo/icons/24/run.png">
		
			<!-- Demo running logic is implemented by this form as an action named "run".
				 The script containing its implementation will follow. -->

			<script event="execute">

				$.Form.executeAction("run");

			</script>

		</button>

		<button label="About" focusable="false" appearance="toolbar-button"
				icon="qookerydemo/icons/24/about_gs.png">

			<!--  Invoke a static method that opens a new window with a Qookery form within -->

			<script event="execute">

				$.Qookery.openWindow("qookerydemo/forms/aboutDialog.xml");

			</script>

		</button>

	</tool-bar>

	<split-pane orientation="horizontal" flexes="1 1" flex="1">

		<!-- A custom appearance is used for split-pane in order to avoid superfluous borders -->

		<split-pane orientation="vertical" flexes="3 1" appearance="undecorated-splitpane">

			<composite layout="v-box" spacing="5" padding="5">

				<!-- Below font, decorator and text-color values are defined by current theme -->

				<label label="Qookery Input XML" font="small" decorator="input"
						text-color="text-gray" padding="0 10" allow-stretch-x="true" />

				<!-- We create a component that is provided by the ACE extension using its
					 custom namespace. We give it an ID so that we can refer to it from
					 other parts of the form.  -->

				<ace:editor xmlns:ace="http://www.qookery.org/ns/Form/Ace"
						id="xmlEditor" mode="xml" flex="1" create-label="false"
						tab-size="4" theme="eclipse" print-margin-column="100" auto-complete="basic" />

			</composite>

			<composite layout="v-box" spacing="5" padding="5">

				<label label="Form Model JSON (optional)" font="small" decorator="input"
						text-color="text-gray" padding="0 10" allow-stretch-x="true" />

				<!-- A very basic logic for loading and unloading data models into our form
					 is shown below; in real-world scenarios, you will have your own business logic
					 for that -->

				<composite layout="h-box" spacing="5">

					<button label="Load Model">

						<script event="execute">

							var text = $("#jsonEditor").getValue();
							var json = qx.lang.Json.parse(text);
							var model = qx.data.marshal.Json.createModel(json, true);
							$("#resultArea").setModel(model);

						</script>

					</button>

					<button label="Unload Model">

						<script event="execute">

							$("#resultArea").setModel(null);

						</script>

					</button>

					<button label="Recreate JSON">

						<script event="execute">

							var model = $("#resultArea").getModel();
							var text = qx.util.Serializer.toJson(model);
							$("#jsonEditor").setValue(text);

						</script>

					</button>

				</composite>

				<!-- A second ACE editor, this time for model's JSON editing -->
				
				<ace:editor xmlns:ace="http://www.qookery.org/ns/Form/Ace"
						id="jsonEditor" mode="json" flex="1" create-label="false"
						tab-size="3" show-invisibles="true" auto-complete="basic" />

			</composite>

		</split-pane>

		<composite layout="v-box" spacing="5" padding="5">

			<label label="Rendered Result" font="small" decorator="input" text-color="text-gray"
					padding="0 10" allow-stretch-x="true" />

			<!-- A application specific component is used to load / unload forms within an
				 initially empty scroll area -->

			<demo:result-area xmlns:demo="http://www.qookery.org/ns/Form/Demo" id="resultArea" flex="1" />

		</composite>

	</split-pane>

	<!-- Register an implementation for a "run" action of the form component. It is
		 going to be called by other parts of this form -->

	<script action="run">

		var xmlCode = $("#xmlEditor").getValue();
		if(xmlCode == null) return;

		$("#resultArea").loadForm(xmlCode);

	</script>

	<!-- Register an implementation for a "load" action; it is called by our demo selector
		 component with a single argument, the symbolic name of the demo to load -->

	<script action="load" arguments="demoName">

		var configuration = $.IApplication.getDemoConfiguration(demoName);
		if(configuration == null) return;

		$.History.addToHistory(demoName, "Qookery Demo - " + configuration["label"]);

		var formFile = configuration["formFile"];
		var formUrl = "resource/qookerydemo/forms/" + formFile;
		$.Qookery.loadResource(formUrl, this, function(data) {
			$("#xmlEditor").setValue(data);
			$.Form.executeAction("run");
		});

		var modelFile = configuration["modelFile"];
		if(modelFile == null) {
			$("#jsonEditor").setValue("null");
		}
		else {
			var modelUrl = "resource/qookerydemo/models/" + modelFile;
			$.Qookery.loadResource(modelUrl, this, function(data) {
				$("#jsonEditor").setValue(data);
			});
		}

	</script>

	<!-- The "isRoot" variable is documented above. With this <if> statement, we sidetrack the
		 parser from enclosed script when the form is not the application root. -->

	<if expression="$.isRoot">

		<!-- This last script has no XML attributes, thus it is going to be invoked by the parser
			 as soon as it reaches it. By this time, the totality of above form will have been parsed.
			 We will use it to load the first demo automatically. -->

		<script>

			var demoName = $.History.getState();
			$.Form.executeAction("load", demoName || "this.rootForm");

		</script>

	</if>

	<!--
		An explanation is due regarding the '$' variable; it is called the scripting context.
		Each form has its own '$' instance and is free to read and write it as desired.
		There are several ways to populate and use it, notably via a) dependency injection (the
		<import> statements at this form's head) b) <variable> statements c) directly reading and
		writing to $.varname from JS scripts and more. One member, $.Form, is always available, 
		and points to the current form component.
	 -->
	
</form>
